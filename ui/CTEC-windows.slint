import { Button, VerticalBox, HorizontalBox, SpinBox, GroupBox, CheckBox, TabWidget, LineEdit } from "std-widgets.slint";
import "./assets/Roboto_Condensed-Regular.ttf";

export global theme {
	out property <length> H : 30px;
	out property <length> ALLIANCE_NAME : 25px;
	out property <length> ALLIANCE_SOCRE : 50px;

	out property <percent> ALLIANCE_HEIGHT : 10%;
	out property <length> ALLIANCE_SCORE: 60px;
	out property <percent> TEAM_HEIGHT : 8%;
	out property <percent> SOCRE_HEIGHT : 10%;
}

export global vars {
	in-out property <int> current_menu:0;
	in-out property <int> matchNumber: 1;

	in-out property<string> red_team1;
	in-out property<string> red_team2;
	in-out property<string> blue_team1;
	in-out property<string> blue_team2;

	in-out property<string> red_team1_members;
	in-out property<string> red_team2_members;
	in-out property<string> blue_team1_members;
	in-out property<string> blue_team2_members;

	in-out property <int> max_matches: 21;

	in-out property <int> red_score: 0;
	in-out property <int> blue_score: 0;

	in-out property <string> time_display: "3:00";
}

export global score_blue {
    in-out property <int> park: 0;
    in-out property <int> auto_ground: 0;
    in-out property <int> auto_beacon: 0;
    in-out property <int> auto_center: 0;
    in-out property <int> auto_L1: 0;
    in-out property <int> auto_L2: 0;
    in-out property <int> auto_L3: 0;

    in-out property <int> ground: 0;
    in-out property <int> beacon: 0;
    in-out property <int> center: 0;
    in-out property <int> L1: 0;
    in-out property <int> L2: 0;
    in-out property <int> L3: 0;

    in-out property <int> end_park: 0;
    in-out property <int> climb: 0;

	in-out property <int> primary: 0;
	in-out property <int> power_up: 0;
	in-out property <int> redundant: 0;
	
	in-out property <int> major_foul: 0;
	in-out property <int> minor_foul: 0;
}

export global score_red {
    in-out property <int> park: 0;
    in-out property <int> auto_ground: 0;
    in-out property <int> auto_beacon: 0;
    in-out property <int> auto_center: 0;
    in-out property <int> auto_L1: 0;
    in-out property <int> auto_L2: 0;
    in-out property <int> auto_L3: 0;

    in-out property <int> ground: 0;
    in-out property <int> beacon: 0;
    in-out property <int> center: 0;
    in-out property <int> L1: 0;
    in-out property <int> L2: 0;
    in-out property <int> L3: 0;

    in-out property <int> end_park: 0;
    in-out property <int> climb: 0;

	in-out property <int> primary: 0;
	in-out property <int> power_up: 0;
	in-out property <int> redundant: 0;

	in-out property <int> major_foul: 0;
	in-out property <int> minor_foul: 0;
}

export global display_score {
	in-out property <int> blue_auto: 0;
	in-out property <int> red_auto: 0;

	in-out property <int> blue_score: 0;
	in-out property <int> red_score: 0;

	in-out property <int> blue_array: 0;
	in-out property <int> red_array: 0;

	in-out property <int> blue_grid: 0;
	in-out property <int> red_grid: 0;

	in-out property <int> blue_endgame: 0;
	in-out property <int> red_endgame: 0;

	in-out property <int> blue_bonus: 0;
	in-out property <int> red_bonus: 0;

	in-out property <int> blue_penalty: 0;
	in-out property <int> red_penalty: 0;
}

export global team_rank {
	in-out property <string> rank1_n: "";
	in-out property <string> rank2_n: "";
	in-out property <string> rank3_n: "";
	in-out property <string> rank4_n: "";
	in-out property <string> rank5_n: "";
	in-out property <string> rank6_n: "";
	in-out property <string> rank7_n: "";
	in-out property <string> rank8_n: "";

	in-out property <string> rank1_rp: "";
	in-out property <string> rank2_rp: "";
	in-out property <string> rank3_rp: "";
	in-out property <string> rank4_rp: "";
	in-out property <string> rank5_rp: "";
	in-out property <string> rank6_rp: "";
	in-out property <string> rank7_rp: "";
	in-out property <string> rank8_rp: "";

	in-out property <string> rank1_as: "";
	in-out property <string> rank2_as: "";
	in-out property <string> rank3_as: "";
	in-out property <string> rank4_as: "";
	in-out property <string> rank5_as: "";
	in-out property <string> rank6_as: "";
	in-out property <string> rank7_as: "";
	in-out property <string> rank8_as: "";
}

export component ScoreWindow inherits Window {

	title: "CTEC In-House Challenge";

	default-font-family: "Roboto";

	width: 1920px;
	height: 1080px;

	background: #000;

	if (vars.current_menu == 1) :
		VerticalLayout {
			width: 60%;
			padding: 20px;
			HorizontalLayout {
				Rectangle {
					border-top-left-radius: 30px;
					border-bottom-left-radius: 30px;
					background: blue;
					width: 40px;
				}
				Rectangle {
					width: 80%;
					height: 600px;
					background: white;
					VerticalLayout {
						padding: 50px;
						padding-left: 20px;
						spacing: 20px;
						HorizontalLayout {
							VerticalLayout {
								padding: 20px;

								property <length> text_height: 30px;
								Text {text: team_rank.rank1_n; color: black; font-size: text_height; horizontal-alignment: center;}
								Text {text: team_rank.rank2_n; color: black; font-size: text_height; horizontal-alignment: center;}
								Text {text: team_rank.rank3_n; color: black; font-size: text_height; horizontal-alignment: center;}
								Text {text: team_rank.rank4_n; color: black; font-size: text_height; horizontal-alignment: center;}
								Text {text: team_rank.rank5_n; color: black; font-size: text_height; horizontal-alignment: center;}
								Text {text: team_rank.rank6_n; color: black; font-size: text_height; horizontal-alignment: center;}
								Text {text: team_rank.rank7_n; color: black; font-size: text_height; horizontal-alignment: center;}
								Text {text: team_rank.rank8_n; color: black; font-size: text_height; horizontal-alignment: center;}
							}
							VerticalLayout {
								padding: 20px;
								spacing: 20px;

								property <length> text_height: 30px;
								Text {text: team_rank.rank1_rp; color: black; font-size: text_height; horizontal-alignment: center;}
								Text {text: team_rank.rank2_rp; color: black; font-size: text_height; horizontal-alignment: center;}
								Text {text: team_rank.rank3_rp; color: black; font-size: text_height; horizontal-alignment: center;}
								Text {text: team_rank.rank4_rp; color: black; font-size: text_height; horizontal-alignment: center;}
								Text {text: team_rank.rank5_rp; color: black; font-size: text_height; horizontal-alignment: center;}
								Text {text: team_rank.rank6_rp; color: black; font-size: text_height; horizontal-alignment: center;}
								Text {text: team_rank.rank7_rp; color: black; font-size: text_height; horizontal-alignment: center;}
								Text {text: team_rank.rank8_rp; color: black; font-size: text_height; horizontal-alignment: center;}
							}
							VerticalLayout {
								padding: 20px;
								spacing: 20px;

								property <length> text_height: 30px;
								Text {text: team_rank.rank1_as; color: black; font-size: text_height; horizontal-alignment: center;}
								Text {text: team_rank.rank2_as; color: black; font-size: text_height; horizontal-alignment: center;}
								Text {text: team_rank.rank3_as; color: black; font-size: text_height; horizontal-alignment: center;}
								Text {text: team_rank.rank4_as; color: black; font-size: text_height; horizontal-alignment: center;}
								Text {text: team_rank.rank5_as; color: black; font-size: text_height; horizontal-alignment: center;}
								Text {text: team_rank.rank6_as; color: black; font-size: text_height; horizontal-alignment: center;}
								Text {text: team_rank.rank7_as; color: black; font-size: text_height; horizontal-alignment: center;}
								Text {text: team_rank.rank8_as; color: black; font-size: text_height; horizontal-alignment: center;}
							}
						}
					}
				}
				Rectangle {
					border-top-right-radius: 30px;
					border-bottom-right-radius: 30px;
					background: red;
					width: 40px;
				}
			}
		}
	
	if (vars.current_menu == 0) :
		Rectangle {
			HorizontalLayout {
				padding-top: 5px;
				padding-left: 5px;
				padding-right: 5px;
				padding-bottom: 5px;
		
				VerticalLayout {
					HorizontalLayout {
						spacing: 5px;
						Rectangle {
							border-top-left-radius: 30px;
							border-top-right-radius: 30px;
							width: 33.333%;
							height: theme.ALLIANCE_HEIGHT;
							background: blue;
							Text {
								font-size: theme.H;
								padding: 5px;
								color: white;
								text: "Blue Alliance";
							}
						}
						Rectangle {
							border-top-left-radius: 30px;
							border-top-right-radius: 30px;
							width: 33.333%;
							height: theme.SOCRE_HEIGHT;
							background: white;
							Text {
								font-size: theme.H;
								color: black;
								text: "Score Breakdown";
							}
						}
						Rectangle {
							border-top-left-radius: 30px;
							border-top-right-radius: 30px;
							width: 33.333%;
							height: theme.ALLIANCE_HEIGHT;
							background: red;
							Text {
								font-size: theme.H;
								padding: 5px;
								color: white;
								text: "Red Alliance";
							}
						}
					}
		
					HorizontalLayout {
						spacing: 5px;
						Rectangle {
							width: 33.333%;
							height: theme.TEAM_HEIGHT;
							background: blue;
							Text {
								y: 1px;
								font-size: theme.ALLIANCE_NAME;
								padding: 5px;
								color: white;
								text: vars.blue_team1 + "    " + vars.blue_team2;
							}
							Text {
								y: 40px;
								font-size: theme.ALLIANCE_NAME - 7px;
								padding: 5px;
								color: white;
								text: vars.blue_team1_members + "            " + vars.blue_team2_members;
							}
						}
						Rectangle {
							background: white;
							width: 33.333%;
							Text {
								y: 1px;
								color: black;
								font-size: 45px;
								text: "Match: " + vars.matchNumber;
							}
						}
						Rectangle {
							width: 33.333%;
							height: theme.TEAM_HEIGHT;
							background: red;
							Text {
								y: 1px;
								font-size: theme.ALLIANCE_NAME;
								padding: 5px;
								color: white;
								text: vars.red_team1 + "    " + vars.red_team2;
							}
							Text {
								y: 40px;
								font-size: theme.ALLIANCE_NAME - 7px;
								padding: 5px;
								color: white;
								text: vars.red_team1_members + "            " + vars.red_team2_members;
							}
						}
					}
		
					HorizontalLayout {
						spacing: 5px;
						Rectangle {
							border-bottom-left-radius: 30px;
							border-bottom-right-radius: 30px;
							width: 33.333%;
							height: 12%;
							background: blue;
							Text {
								y: parent.y /2;
								font-size: theme.ALLIANCE_SCORE;
								padding: 1px;
								color: white;
								text: vars.blue_score;
							}
						}
						Rectangle {
							background: white;
							width: 33.333%;
							Text {
								y: 1px;
								color: black;
								font-size: 45px;
								text: vars.time_display;
							}
						}
						Rectangle {
							border-bottom-left-radius: 30px;
							border-bottom-right-radius: 30px;
							width: 33.333%;
							height: theme.TEAM_HEIGHT;
							background: red;
							Text {
								y: parent.y /2;
								font-size: theme.ALLIANCE_SCORE;
								padding: 1px;
								color: white;
								text: vars.red_score;
							}
						}
					}
				}
			}
			HorizontalLayout {
				padding-top: 5px;
				padding-left: 5px;
				padding-right: 5px;
				padding-bottom: 5px;
		
				VerticalLayout {
					HorizontalLayout {
						spacing: 5px;
						Rectangle {
							border-top-left-radius: 30px;
							border-top-right-radius: 30px;
							width: 33.333%;
							height: theme.ALLIANCE_HEIGHT;
							background: blue;
							Text {
								font-size: theme.H;
								padding: 5px;
								color: white;
								text: "Blue Alliance";
							}
						}
						Rectangle {
							border-top-left-radius: 30px;
							border-top-right-radius: 30px;
							width: 33.333%;
							height: theme.SOCRE_HEIGHT;
							background: white;
							Text {
								font-size: theme.H;
								color: black;
								text: "Score Breakdown";
							}
						}
						Rectangle {
							border-top-left-radius: 30px;
							border-top-right-radius: 30px;
							width: 33.333%;
							height: theme.ALLIANCE_HEIGHT;
							background: red;
							Text {
								font-size: theme.H;
								padding: 5px;
								color: white;
								text: "Red Alliance";
							}
						}
					}
		
					HorizontalLayout {
						spacing: 5px;
						Rectangle {
							width: 33.333%;
							height: theme.TEAM_HEIGHT;
							background: blue;
							Text {
								y: 1px;
								font-size: theme.ALLIANCE_NAME;
								padding: 5px;
								color: white;
								text: vars.blue_team1 + "    " + vars.blue_team2;
							}
							Text {
								y: 40px;
								font-size: theme.ALLIANCE_NAME - 7px;
								padding: 5px;
								color: white;
								text: vars.blue_team1_members + "            " + vars.blue_team2_members;
							}
						}
						Rectangle {
							background: white;
							width: 33.333%;
							Text {
								y: 1px;
								color: black;
								font-size: 45px;
								text: "Match: " + vars.matchNumber;
							}
						}
						Rectangle {
							width: 33.333%;
							height: theme.TEAM_HEIGHT;
							background: red;
							Text {
								y: 1px;
								font-size: theme.ALLIANCE_NAME;
								padding: 5px;
								color: white;
								text: vars.red_team1 + "    " + vars.red_team2;
							}
							Text {
								y: 40px;
								font-size: theme.ALLIANCE_NAME - 7px;
								padding: 5px;
								color: white;
								text: vars.red_team1_members + "            " + vars.red_team2_members;
							}
						}
					}
		
					HorizontalLayout {
						spacing: 5px;
						Rectangle {
							border-bottom-left-radius: 30px;
							border-bottom-right-radius: 30px;
							width: 33.333%;
							height: 12%;
							background: blue;
							Text {
								y: parent.y /2;
								font-size: theme.ALLIANCE_SCORE;
								padding: 1px;
								color: white;
								text: vars.blue_score;
							}
						}
						Rectangle {
							background: white;
							width: 33.333%;
							Text {
								y: 1px;
								color: black;
								font-size: 45px;
								//font-size: 10px;
								text: vars.time_display;//score.park + " " + score.auto_ground + " " + score.auto_beacon + " " + score.auto_center + " " + score.auto_L1 + " " + score.auto_L2 + " " + score.auto_L3 + " " + score.ground + " " + score.beacon + " " + score.center + " " + score.L1 + " " + score.L2 + " " + score.L3 + " " + score.end_park + " " + score.climb;
							}
						}
						Rectangle {
							border-bottom-left-radius: 30px;
							border-bottom-right-radius: 30px;
							width: 33.333%;
							height: theme.TEAM_HEIGHT;
							background: red;
							Text {
								y: parent.y /2;
								font-size: theme.ALLIANCE_SCORE;
								padding: 1px;
								color: white;
								text: vars.red_score;
							}
						}
					}

					HorizontalLayout {
						spacing: 5px;
						Rectangle {
							width: 33.333%;
						}
						Rectangle {
							background: white;
							width: 33.333%;
							height: 500px;
							border-bottom-left-radius: 30px;
							border-bottom-right-radius: 30px;
							HorizontalLayout {
								VerticalLayout {
									padding: 20px;
	
									property <length> text_height: 30px;
									Text {text: display_score.blue_auto; color: black; font-size: text_height; horizontal-alignment: center;}
									Text {text: display_score.blue_array; color: black; font-size: text_height; horizontal-alignment: center;}
									Text {text: display_score.blue_grid; color: black; font-size: text_height; horizontal-alignment: center;}
									Text {text: display_score.blue_endgame; color: black; font-size: text_height; horizontal-alignment: center;}
									Text {text: display_score.blue_bonus; color: black; font-size: text_height; horizontal-alignment: center;}
									Text {text: display_score.blue_penalty; color: black; font-size: text_height; horizontal-alignment: center;}
								}
								VerticalLayout {
									padding: 20px;
									spacing: 20px;
	
									property <length> text_height: 30px;
									Text {text: "Auto"; color: black; font-size: text_height; horizontal-alignment: center;}
									Text {text: "Communication Array"; color: black; font-size: text_height; horizontal-alignment: center;}
									Text {text: "Resource Grids"; color: black; font-size: text_height; horizontal-alignment: center;}
									Text {text: "Endgame"; color: black; font-size: text_height; horizontal-alignment: center;}
									Text {text: "Bonus"; color: black; font-size: text_height; horizontal-alignment: center;}
									Text {text: "Penalty"; color: black; font-size: text_height; horizontal-alignment: center;}
								}
								VerticalLayout {
									padding: 20px;
									spacing: 20px;
	
									property <length> text_height: 30px;
									Text {text: display_score.red_auto; color: black; font-size: text_height; horizontal-alignment: center;}
									Text {text: display_score.red_array; color: black; font-size: text_height; horizontal-alignment: center;}
									Text {text: display_score.red_grid; color: black; font-size: text_height; horizontal-alignment: center;}
									Text {text: display_score.red_endgame; color: black; font-size: text_height; horizontal-alignment: center;}
									Text {text: display_score.red_bonus; color: black; font-size: text_height; horizontal-alignment: center;}
									Text {text: display_score.red_penalty; color: black; font-size: text_height; horizontal-alignment: center;}
								}
							}
						}
						Rectangle {
							width: 33.333%;
					}
				}
			}
		}
	if (vars.current_menu == 1) :
		Image {
			source: @image-url("./assets/StellerConstruction.png");
			image-fit: contain;
		}
	if (vars.current_menu == 2) :
		Rectangle {
		}
	}
}

export component ControlWindow inherits Window {
	callback add-match(int, int, int, int);
	callback switch_tab(int);
	callback submit_score();
    callback reset_clicked();
	callback start_clicked();

	width: 960px;
	height: 930px;
	background: gray;

	title: "CTEC - Control";
	//background: @image-url("./assets/StellerConstruction.png");
	icon: @image-url("./assets/StellerConstruction.png");
	Image {
		source: @image-url("./assets/StellerConstruction.png");
		image-fit: contain;
	}

	VerticalLayout {
		spacing: 10px;
		padding: 10px;
		Rectangle {
			opacity: 0.95;
			height: 25px;

			background: black;
			border-radius: 10px;
			border-width: 1px;
			border-color: darkblue;

			Text {text: "Control Window"; //+ score.park + " " + score.auto_ground + " " + score.auto_beacon + " " + score.auto_center + " " + score.auto_L1 + " " + score.auto_L2 + " " + score.auto_L3 + " " + score.ground + " " + score.beacon + " " + score.center + " " + score.L1 + " " + score.L2 + " " + score.L3 + " " + score.end_park + " " + score.climb; 
			color: white;}
		}
		Rectangle {
			height: 55px;

			background: black;
			border-radius: 10px;
			border-width: 1px;
			border-color: darkblue;

			Text {text: "Match Managment " + vars.matchNumber; color: white; y: 3px;}
			HorizontalLayout {
				alignment: space-around;
				spacing: 20px;
				y: parent.height * 0.085;

				Button {text: "Match"; width: 60px; height: 35px; y: parent.y / 2; clicked => {switch_tab(0);}}
				Button {text: "Rank"; width: 60px; height: 35px; y: parent.y / 2; clicked => {switch_tab(2);}}
				Button {text: "Alliance Selection"; width: 130px; height: 35px; y: parent.y / 2; clicked => {switch_tab(1);}}

				Button {text: "Start"; width: 60px; height: 35px; y: parent.y / 2; clicked => {start_clicked();}}
				Button {text: "Pause"; width: 60px; height: 35px; y: parent.y / 2; clicked => {}}
				Button {text: "Reset"; width: 60px; height: 35px; y: parent.y / 2; clicked => {reset_clicked();}}

				Button {text: "Submit Score"; width: 60px; height: 35px; y: parent.y / 2; clicked => {submit_score();}}

				Rectangle {Text {text: "Match Number:";}}
				Rectangle {
					width: 150px;
					SpinBox {
						maximum: vars.max_matches;
						minimum: 1;
						value <=> vars.matchNumber;
					}
				}
			}
		}
		TabWidget {
			Tab {
				title: "Scoring";

				VerticalLayout {
					Rectangle {height: 10px;}
					Rectangle {
						height: 340px;

						background: black;
						border-radius: 10px;
						border-width: 1px;
						border-color: darkblue;

						Text {text: "Auto Score"; color: white; y: 3px;}
						HorizontalLayout {
							y: 10px;
							height: 335px;
							padding: 20px;
							spacing: 20px;
							Rectangle {
								width: 46%;
								border-radius: 10px;
								border-width: 4px;
								border-color: darkblue;
								Text {
									y: 10px;
									text: "Blue";
								}
								VerticalBox {
									padding-top: 30px;
									padding: 25px;
									HorizontalLayout {Text {text: "Park";} SpinBox {width: 80px; changed value => {score_blue.park = self.value * 6;}}}
									HorizontalLayout {Text {text: "Ground";} SpinBox {width: 80px; value: score_blue.auto_ground; changed value => {score_blue.auto_ground = self.value * 4;}}}
									HorizontalLayout {Text {text: "Beacon";} SpinBox {width: 80px; changed value => {score_blue.auto_beacon = self.value * 8;}}}
									HorizontalLayout {Text {text: "Beacon Center";} SpinBox {width: 80px; changed value => {score_blue.auto_center = self.value * 10;}}}
									HorizontalLayout {Text {text: "L1";} SpinBox {width: 80px; changed value => {score_blue.auto_L1 = self.value * 6;}}}	
									HorizontalLayout {Text {text: "L2";} SpinBox {width: 80px; changed value => {score_blue.auto_L2 = self.value * 8;}}}
									HorizontalLayout {Text {text: "L3";} SpinBox {width: 80px; changed value => {score_blue.auto_L3 = self.value * 10;}}}
								}
							}
							Rectangle {
								border-radius: 10px;
								border-width: 4px;
								border-color: darkred;
								Text {
									y: 10px;
									text: "Red";
								}
								VerticalBox {
									padding-top: 30px;
									padding: 25px;
									HorizontalLayout {Text {text: "Park";} SpinBox {width: 80px; changed value => {score_red.park = self.value * 6;}}}
									HorizontalLayout {Text {text: "Ground";} SpinBox {width: 80px; changed value => {score_red.auto_ground = self.value * 4;}}}
									HorizontalLayout {Text {text: "Beacon";} SpinBox {width: 80px; changed value => {score_red.auto_beacon = self.value * 8;}}}
									HorizontalLayout {Text {text: "Beacon Center";} SpinBox {width: 80px; changed value => {score_red.auto_center = self.value * 10;}}}
									HorizontalLayout {Text {text: "L1";} SpinBox {width: 80px; changed value => {score_red.auto_L1 = self.value * 6;}}}	
									HorizontalLayout {Text {text: "L2";} SpinBox {width: 80px; changed value => {score_red.auto_L2 = self.value * 8;}}}
									HorizontalLayout {Text {text: "L3";} SpinBox {width: 80px; changed value => {score_red.auto_L3 = self.value * 10;}}}
								}
							}
						}
					}	
				}
		
				Rectangle {
					y: 360px;
					height: 300px;
				
					background: black;
					border-radius: 10px;
					border-width: 1px;
					border-color: darkblue;
				
					Text {text: "Teleop Score"; color: white; y: 3px;}
					HorizontalLayout {
						y: 10px;
						height: 295px;
						padding: 20px;
						spacing: 20px;
						Rectangle {
							width: 46%;
							border-radius: 10px;
							border-width: 4px;
							border-color: darkblue;
							Text {
								y: 10px;
								text: "Blue";
							}
							VerticalBox {
								padding-top: 30px;
								padding: 25px;
								HorizontalLayout {Text {text: "Ground";} SpinBox {width: 80px; changed value => {score_blue.ground = self.value * 2;}}}
								HorizontalLayout {Text {text: "Beacon";} SpinBox {width: 80px; changed value => {score_blue.beacon = self.value * 4;}}}
								HorizontalLayout {Text {text: "Beacon Center";} SpinBox {width: 80px; changed value => {score_blue.center = self.value * 5;}}}
								HorizontalLayout {Text {text: "L1";} SpinBox {width: 80px; changed value => {score_blue.L1 = self.value * 3;}}}
								HorizontalLayout {Text {text: "L2";} SpinBox {width: 80px; changed value => {score_blue.L2 = self.value * 4;}}}
								HorizontalLayout {Text {text: "L3";} SpinBox {width: 80px; changed value => {score_blue.L3 = self.value * 5;}}}
							}
						}
						Rectangle {
							border-radius: 10px;
							border-width: 4px;
							border-color: darkred;
							Text {
								y: 10px;
								text: "Red";
							}
							VerticalBox {
								padding-top: 30px;
								padding: 25px;
								HorizontalLayout {Text {text: "Ground";} SpinBox {width: 80px; changed value => {score_red.ground = self.value * 2;}}}
								HorizontalLayout {Text {text: "Beacon";} SpinBox {width: 80px; changed value => {score_red.beacon = self.value * 4;}}}
								HorizontalLayout {Text {text: "Beacon Center";} SpinBox {width: 80px; changed value => {score_red.center = self.value * 5;}}}
								HorizontalLayout {Text {text: "L1";} SpinBox {width: 80px; changed value => {score_red.L1 = self.value * 3;}}}
								HorizontalLayout {Text {text: "L2";} SpinBox {width: 80px; changed value => {score_red.L2 = self.value * 4;}}}
								HorizontalLayout {Text {text: "L3";} SpinBox {width: 80px; changed value => {score_red.L3 = self.value * 5;}}}
							}
						}
					}
				}
				Rectangle {
					y: 670px;
					height: 110px;
				
					background: black;
					border-radius: 10px;
					border-width: 1px;
					border-color: darkblue;

					Text {text: "Endgame"; color: white; y: 3px;}
					HorizontalLayout {
						y: 1px;
						height: 40px;
						padding: 20px;
						spacing: 20px;
						Rectangle {
							width: 46%;
							border-radius: 10px;
							border-width: 4px;
							border-color: darkblue;
							Text {
								y: 7px;
								text: "Blue";
							}
							VerticalBox {
								padding-top: 25px;
								padding: 25px;
								HorizontalLayout {Text {text: "Park";} SpinBox {width: 80px; changed value => {score_blue.end_park = self.value * 2;}}}
								HorizontalLayout {Text {text: "Climb";} SpinBox {width: 80px; changed value => {score_blue.climb = self.value * 20;}}}
							}
						}
						Rectangle {
							border-radius: 10px;
							border-width: 4px;
							border-color: darkred;
							Text {
								y: 7px;
								text: "Red";
							}
							VerticalBox {
								padding-top: 25px;
								padding: 25px;
								HorizontalLayout {Text {text: "Park";} SpinBox {width: 80px; changed value => {score_red.end_park = self.value * 2;}}}
								HorizontalLayout {Text {text: "Climb";} SpinBox {width: 80px; changed value => {score_red.climb = self.value * 20;}}}
							}
						}
					}
				}
			}

			Tab {
				title: "Bonus Scoring";

				VerticalLayout {
                    Rectangle {height: 10px;}
                    Rectangle {
        	    	    height: 190px;

        	    	    background: black;
        	    	    border-radius: 10px;
        	    	    border-width: 1px;
        	    	    border-color: darkblue;

        	    	    Text {text: "Bonus"; color: white; y: 3px;}
        	    	    HorizontalLayout {
        	    	        y: 10px;
        	    	        height: 180px;
        	    	        padding: 20px;
        	    	        spacing: 20px;
        	    	        Rectangle {
        	    	            width: 46%;
        	    	            border-radius: 10px;
        	    	            border-width: 4px;
        	    	            border-color: darkblue;
        	    	            Text {
        	    	                y: 10px;
        	    	                text: "Blue";
        	    	            }
        	    	            VerticalBox {
        	    	                padding-top: 30px;
        	    	                padding: 25px;
        	    	                HorizontalLayout {Text {text: "Primary Communication";} SpinBox {width: 80px; changed value => {score_blue.primary = self.value * 5;}}}
        	    	                HorizontalLayout {Text {text: "Power Up";} SpinBox {width: 80px; changed value => {score_blue.power_up = self.value * 5;}}}
        	    	                HorizontalLayout {Text {text: "Redundant Communication";} SpinBox {width: 80px; changed value => {score_blue.redundant = self.value * 10;}}}
        	    	            }
        	    	        }
        	    	        Rectangle {
        	    	            border-radius: 10px;
        	    	            border-width: 4px;
        	    	            border-color: darkred;
        	    	            Text {
        	    	                y: 10px;
        	    	                text: "Red";
        	    	            }
        	    	            VerticalBox {
        	    	                padding-top: 30px;
        	    	                padding: 25px;
        	    	                HorizontalLayout {Text {text: "Primary Communication";} SpinBox {width: 80px; changed value => {score_red.primary = self.value * 5;}}}
        	    	                HorizontalLayout {Text {text: "Power Up";} SpinBox {width: 80px; changed value => {score_red.power_up = self.value * 5;}}}
        	    	                HorizontalLayout {Text {text: "Redundant Communication";} SpinBox {width: 80px; changed value => {score_red.redundant = self.value * 10;}}}
        	    	            }
        	    	        }
        	    	    }
        	    	}
					Rectangle {height: 10px;}
                    Rectangle {
        	    	    height: 190px;

        	    	    background: black;
        	    	    border-radius: 10px;
        	    	    border-width: 1px;
        	    	    border-color: darkblue;

        	    	    Text {text: "Penalty Points"; color: white; y: 3px;}
        	    	    HorizontalLayout {
        	    	        y: 10px;
        	    	        height: 180px;
        	    	        padding: 20px;
        	    	        spacing: 20px;
        	    	        Rectangle {
        	    	            width: 46%;
        	    	            border-radius: 10px;
        	    	            border-width: 4px;
        	    	            border-color: darkblue;
        	    	            Text {
        	    	                y: 10px;
        	    	                text: "Blue";
        	    	            }
        	    	            VerticalBox {
        	    	                padding-top: 30px;
        	    	                padding: 25px;
        	    	                HorizontalLayout {Text {text: "Minor Foul";} SpinBox {width: 80px; changed value => {score_red.minor_foul = self.value * 5;}}}
        	    	                HorizontalLayout {Text {text: "Major Foul";} SpinBox {width: 80px; changed value => {score_red.major_foul = self.value * 15;}}}
        	    	            }
        	    	        }
        	    	        Rectangle {
        	    	            border-radius: 10px;
        	    	            border-width: 4px;
        	    	            border-color: darkred;
        	    	            Text {
        	    	                y: 10px;
        	    	                text: "Red";
        	    	            }
        	    	            VerticalBox {
        	    	                padding-top: 30px;
        	    	                padding: 25px;
        	    	                HorizontalLayout {Text {text: "Minor Foul";} SpinBox {width: 80px; changed value => {score_blue.minor_foul = self.value * 5;}}}
        	    	                HorizontalLayout {Text {text: "Major Foul";} SpinBox {width: 80px; changed value => {score_blue.major_foul = self.value * 15;}}}
        	    	            }
        	    	        }
        	    	    }
        	    	}	
        		}
			}
			
			Tab {
				title: "Alliance Selection";
				Rectangle {
					background: grey;
					VerticalBox {
						alignment: start;
						padding: 10px;
						spacing: 10px;
						
						Text {
							text: "Match Scheduler";
							font-size: 24px;
						}
						
						HorizontalBox {
							spacing: 10px;
							Text { text: "Red Alliance:"; vertical-alignment: center; }
							red1 := LineEdit { placeholder-text: "Team 1"; width: 80px; }
							red2 := LineEdit { placeholder-text: "Team 2"; width: 80px; }
						}
						
						HorizontalBox {
							spacing: 10px;
							Text { text: "Blue Alliance:"; vertical-alignment: center; }
							blue1 := LineEdit { placeholder-text: "Team 1"; width: 80px; }
							blue2 := LineEdit { placeholder-text: "Team 2"; width: 80px; }
						}
						
						Button {
							text: "Add Match";
							clicked => {
								// Convert text inputs to integers
								// Note: In real code, add error handling for invalid inputs
								add-match(
									red1.text.to-float(), 
									red2.text.to-float(), 
									blue1.text.to-float(), 
									blue2.text.to-float()
								);
							}
						}
					}
				}
			}
		}
	}
}